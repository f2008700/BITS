module half_adder(S,C,x,y);
	output S,C;
	input x,y;
	
	xor(S,x,y);
	and(C,x,y);

endmodule

module full_adder(S,C,x,y,Cin);
	output S,C;
	input x,y,Cin;
	wire S1,C1,C2;
	
	half_adder H1(S1,C1,x,y);
	half_adder H2(S,C2,S1,Cin);
	
	or O1(C,C1,C2);
endmodule 

module four_bit_ripple_carry_adder(Sum, C4, A, B, C0);
	output [3:0] Sum, C4;
	input [3:0] A; input [3:0] B, C0;
	wire C1,C2,C3;
	full_adder FA0(Sum[0],C1,A[0],B[0],C0);
	full_adder FA1(Sum[1],C2,A[1],B[1],C1);
	full_adder FA2(Sum[2],C3,A[2],B[2],C2);
	full_adder FA3(Sum[3],C4,A[3],B[3],C3);

endmodule


module t_four_bit_ripple_carry_adder;
	wire [3:0] Sum, C4; 
	reg [3:0] A; reg [3:0] B, C0;

	four_bit_ripple_carry_adder F1(Sum, C4, A, B, C0);
	
	initial # 40 $finish;
	
	initial begin 
	 A=3'b000; B=3'b000; C0=0; 
	#5 A=3'b011; B=3'b010; C0=0; 
	#5 A=3'b011; B=3'b010; C0=1; 
	#5 A=3'b010; B=3'b100; C0=0;
	#5 A=3'b111; B=3'b111; C0=1;
		
	 
	end 

endmodule